@Initial = (
    sub {
        # make sure global CFs are not applied to local objects
        my $ocfs = RT::ObjectCustomFields->new( RT->SystemUser );
        $ocfs->Limit( FIELD => 'ObjectId', OPERATOR => '!=', VALUE => 0 );
        my $alias = $ocfs->Join(
            FIELD1 => 'CustomField',
            TABLE2 => 'ObjectCustomFields',
            FIELD2 => 'CustomField',
        );
        $ocfs->Limit( ALIAS => $alias, FIELD => 'ObjectId', VALUE => 0 );
        while ( my $ocf = $ocfs->Next ) {
            $ocf->Delete;
        }
    },
    sub {
        # sort SortOrder
        my $sth = $RT::Handle->dbh->prepare(
            "SELECT cfs.LookupType, ocfs.id"
            ." FROM ObjectCustomFields ocfs, CustomFields cfs"
            ." WHERE cfs.id = ocfs.CustomField"
            ." ORDER BY cfs.LookupType, ocfs.SortOrder, cfs.Name"
        );
        $sth->execute;

        my ($i, $prev_type) = (0, '');
        while ( my ($lt, $id) = $sth->fetchrow_array ) {
            $i = 0 if $prev_type ne $lt;
            my $ocf = RT::ObjectCustomField->new( RT->SystemUser );
            $ocf->Load( $id );
            my ($status, $msg) = $ocf->SetSortOrder( $i++ );
            $RT::Logger->warning("Couldn't set SortOrder: $msg")
                unless $status;
            $prev_type = $lt;
        }
    },
    sub {
        my $cf = RT::CustomField->new( $RT::SystemUser );
        $cf->LoadByCols(
            Name       => 'PublicKey',
            LookupType => RT::User->new( $RT::SystemUser )->CustomFieldLookupType,
        );
        unless ( $cf->id ) {
            $RT::Logger->info("You don't have PublicKey. Nothing to do.");
            return 1;
        }
        my ($status, $msg) = $cf->SetName('SMIME Key');
        unless ( $status ) {
            $RT::Logger->error("Couldn't rename custom field: $msg");
        } else {
            $RT::Logger->info("Renamed custom field: $msg");
        }
        return 1;
    },
    sub {
        $RT::Logger->info("Going to delete all SMIMEKeyNotAfter attributes");
        my $attrs = RT::Attributes->new( $RT::SystemUser );
        $attrs->Limit( FIELD => 'ObjectType', VALUE => 'RT::User' );
        $attrs->Limit( FIELD => 'Name', VALUE => 'SMIMEKeyNotAfter' );
        while ( my $attr = $attrs->Next ) {
            my ($status, $msg) = $attr->Delete;
            unless ( $status ) {
                $RT::Logger->error("Couldn't delete attribute: $msg");
            }
        }
        return 1;
    },
);

